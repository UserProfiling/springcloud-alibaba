server:
  port: 8077
spring:
  application:
    name: api-gateway
  cloud:
    gateway:
      #路由规则
      routes:
        - id: order_route  #路由的唯一标识，路由到订单，名字可以自定义
#          uri: http://localhost:8075 #需要转发的地址
          uri: lb://order-seata-alibaba-service #集成nacos后地址就可以改为服务名,lb:load balance 使用nacos的本地负载均衡
          #断言规则 用于路由规则的匹配
          #一旦路径中包含了/order-service/就说明断言成功，会进行路由转发
          # http://localhost:8077/order-service/order/add -> http://localhost:8075/order-service/order/add
          predicates:
#            - Path= /order-service/**
            - CheckAuth=kehl
          #但是由于在order服务的controller层接口中，是不存在/order-service/地址的，所有要用过滤器，过滤掉第一层地址
          filters:
            - AddRequestHeader=X-Request-red, blue
            - StripPrefix=1 #转发之前去掉第一层路径
            - AddRequestParameter=red, blue
            - CheckAuth=CheckAuthName, kehl
            - PrefixPath=/springCloud-order-service
      #跨域设置
      globalcors:
        cors-configurations:
          '[/**]':#允许跨域访问的资源
            allowedOrigins: "*" #跨域允许的来源，在开发阶段就设置为*所有
            allowedMethods:
              - GET
              - POST
            #http://localhost:8075/order/add
        # - id: stock_route
    nacos:
      discovery:
        server-addr: 127.0.0.1:8848
        username: nacos
        password: nacos


